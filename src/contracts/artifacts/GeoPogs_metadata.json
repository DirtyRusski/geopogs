{
	"compiler": {
		"version": "0.8.0+commit.c7dfd78e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_symbol",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_baseUri",
						"type": "string"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_approved",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "_approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "CANNOT_TRANSFER_TO_ZERO_ADDRESS",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "NOT_CURRENT_OWNER",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_approved",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "buy",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "getApproved",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint8",
						"name": "_series",
						"type": "uint8"
					},
					{
						"internalType": "uint16",
						"name": "_pressing",
						"type": "uint16"
					},
					{
						"internalType": "uint256",
						"name": "_price",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "_memo",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_uri",
						"type": "string"
					}
				],
				"name": "mint",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_price",
						"type": "uint256"
					}
				],
				"name": "offerForSale",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "removeFromSale",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "_approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_baseUri",
						"type": "string"
					}
				],
				"name": "setBaseUri",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "_interfaceID",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "_symbol",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_index",
						"type": "uint256"
					}
				],
				"name": "tokenByIndex",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "tokenData",
				"outputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "memo",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "uri",
								"type": "string"
							}
						],
						"internalType": "struct NFTokenMetadata.TokenMetadata",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "tokenEdition",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "tokenMemo",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_index",
						"type": "uint256"
					}
				],
				"name": "tokenOfOwnerByIndex",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "tokenPressing",
				"outputs": [
					{
						"internalType": "uint16",
						"name": "",
						"type": "uint16"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "tokenPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "tokenSeries",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "tokenURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "This is an example contract implementation of NFToken with enumerable and metadata extensions.",
			"kind": "dev",
			"methods": {
				"approve(address,uint256)": {
					"details": "Set or reaffirm the approved address for an NFT. This function can be changed to payable.",
					"params": {
						"_approved": "Address to be approved for the given NFT ID.",
						"_tokenId": "ID of the token to be approved."
					}
				},
				"balanceOf(address)": {
					"details": "Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.",
					"params": {
						"_owner": "Address for whom to query the balance."
					},
					"returns": {
						"_0": "Balance of _owner."
					}
				},
				"buy(uint256)": {
					"details": "Buy a for-sale token",
					"params": {
						"_tokenId": "Id for which we want to buy"
					}
				},
				"constructor": {
					"details": "Contract constructor."
				},
				"getApproved(uint256)": {
					"details": "Get the approved address for a single NFT.",
					"params": {
						"_tokenId": "ID of the NFT to query the approval of."
					},
					"returns": {
						"_0": "Address that _tokenId is approved for."
					}
				},
				"isApprovedForAll(address,address)": {
					"details": "Checks if `_operator` is an approved operator for `_owner`.",
					"params": {
						"_operator": "The address that acts on behalf of the owner.",
						"_owner": "The address that owns the NFTs."
					},
					"returns": {
						"_0": "True if approved for all, false otherwise."
					}
				},
				"mint(address,uint8,uint16,uint256,string,string)": {
					"details": "Mints a new NFT.",
					"params": {
						"_memo": "String memo",
						"_pressing": "Pressing [serial number in series+edition]",
						"_price": "Sale price, 0 to disable",
						"_series": "Series [1-12 for first edition]",
						"_to": "The address that will own the minted NFT.",
						"_uri": "String URI"
					}
				},
				"name()": {
					"details": "Returns a descriptive name for a collection of NFTokens.",
					"returns": {
						"_name": "Representing name."
					}
				},
				"offerForSale(uint256,uint256)": {
					"details": "Offer token for sale on internal marketplace",
					"params": {
						"_price": "new price in wei. 0 to remove from sale",
						"_tokenId": "Id for which we want to set price."
					}
				},
				"ownerOf(uint256)": {
					"details": "Returns the address of the owner of the NFT. NFTs assigned to zero address are considered invalid, and queries about them do throw.",
					"params": {
						"_tokenId": "The identifier for an NFT."
					},
					"returns": {
						"_owner": "Address of _tokenId owner."
					}
				},
				"removeFromSale(uint256)": {
					"details": "De-list a for-sale token",
					"params": {
						"_tokenId": "Id for which we want to remove from sale"
					}
				},
				"safeTransferFrom(address,address,uint256)": {
					"details": "Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.",
					"params": {
						"_from": "The current owner of the NFT.",
						"_to": "The new owner.",
						"_tokenId": "The NFT to transfer."
					}
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"details": "Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.",
					"params": {
						"_data": "Additional data with no specified format, sent in call to `_to`.",
						"_from": "The current owner of the NFT.",
						"_to": "The new owner.",
						"_tokenId": "The NFT to transfer."
					}
				},
				"setApprovalForAll(address,bool)": {
					"details": "Enables or disables approval for a third party (\"operator\") to manage all of `msg.sender`'s assets. It also emits the ApprovalForAll event.",
					"params": {
						"_approved": "True if the operators is approved, false to revoke approval.",
						"_operator": "Address to add to the set of authorized operators."
					}
				},
				"supportsInterface(bytes4)": {
					"details": "Function to check which interfaces are suported by this contract.",
					"params": {
						"_interfaceID": "Id of the interface."
					},
					"returns": {
						"_0": "True if _interfaceID is supported, false otherwise."
					}
				},
				"symbol()": {
					"details": "Returns an abbreviated name for NFTokens.",
					"returns": {
						"_symbol": "Representing symbol."
					}
				},
				"tokenByIndex(uint256)": {
					"details": "Returns NFT ID by its index.",
					"params": {
						"_index": "A counter less than `totalSupply()`."
					},
					"returns": {
						"_0": "Token id."
					}
				},
				"tokenData(uint256)": {
					"params": {
						"_tokenId": "Id for which we want data."
					},
					"returns": {
						"_0": "data of _tokenId."
					}
				},
				"tokenEdition(uint256)": {
					"details": "Edition for a given NFT.",
					"params": {
						"_tokenId": "Id for which we want edition."
					},
					"returns": {
						"_0": "Edition of _tokenId."
					}
				},
				"tokenMemo(uint256)": {
					"details": "A memo for a given NFT.",
					"params": {
						"_tokenId": "Id for which we want memo."
					},
					"returns": {
						"_0": "memo of _tokenId."
					}
				},
				"tokenOfOwnerByIndex(address,uint256)": {
					"details": "returns the n-th NFT ID from a list of owner's tokens.",
					"params": {
						"_index": "Index number representing n-th token in owner's list of tokens.",
						"_owner": "Token owner's address."
					},
					"returns": {
						"_0": "Token id."
					}
				},
				"tokenPressing(uint256)": {
					"details": "Pressing for a given NFT.",
					"params": {
						"_tokenId": "Id for which we want pressing."
					},
					"returns": {
						"_0": "Pressing of _tokenId."
					}
				},
				"tokenPrice(uint256)": {
					"details": "Price for a given NFT.",
					"params": {
						"_tokenId": "Id for which we want price."
					},
					"returns": {
						"_0": "Price of _tokenId."
					}
				},
				"tokenSeries(uint256)": {
					"details": "Series for a given NFT.",
					"params": {
						"_tokenId": "Id for which we want series."
					},
					"returns": {
						"_0": "Series of _tokenId."
					}
				},
				"tokenURI(uint256)": {
					"details": "A distinct URI (RFC 3986) for a given NFT.",
					"params": {
						"_tokenId": "Id for which we want uri."
					},
					"returns": {
						"_0": "URI of _tokenId."
					}
				},
				"totalSupply()": {
					"details": "Returns the count of all existing NFTokens.",
					"returns": {
						"_0": "Total supply of NFTs."
					}
				},
				"transferFrom(address,address,uint256)": {
					"details": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.",
					"params": {
						"_from": "The current owner of the NFT.",
						"_to": "The new owner.",
						"_tokenId": "The NFT to transfer."
					}
				},
				"transferOwnership(address)": {
					"details": "Allows the current owner to transfer control of the contract to a newOwner.",
					"params": {
						"_newOwner": "The address to transfer ownership to."
					}
				}
			},
			"stateVariables": {
				"NOT_FOR_SALE": {
					"details": "List of revert message codes. Implementing dApp should handle showing the correct message."
				},
				"idToPrice": {
					"details": "Mapping from token ID to its price."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"approve(address,uint256)": {
					"notice": "The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner."
				},
				"getApproved(uint256)": {
					"notice": "Throws if `_tokenId` is not a valid NFT."
				},
				"safeTransferFrom(address,address,uint256)": {
					"notice": "This works identically to the other function with an extra data parameter, except this function just sets data to \"\""
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"notice": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`."
				},
				"setApprovalForAll(address,bool)": {
					"notice": "This works even if sender doesn't own any tokens at the time."
				},
				"transferFrom(address,address,uint256)": {
					"notice": "The caller is responsible to confirm that `_to` is capable of receiving NFTs or else they maybe be permanently lost."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/src/contracts/geopogs.sol": "GeoPogs"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"localhost/src/contracts/geopogs.sol": {
			"keccak256": "0x2962659c48f92ffdcf36caed6e54b7ade4da2cca78ad6a6c75947043d9337333",
			"license": "MIT",
			"urls": [
				"bzz-raw://afd0a358d81e368a8e5a3308f18f8e319900315b1f38f70abd428164c5512008",
				"dweb:/ipfs/Qmb4NHgMZgMAFvff6RiRtRjvtRdh9kQxzJAbv3aGNf2mZc"
			]
		},
		"localhost/src/contracts/ownership/ownable.sol": {
			"keccak256": "0x57ef5ed3dc0a47f8c20beb35f6c8c904d25c14e18623e0c172a52845cadb7d52",
			"license": "MIT",
			"urls": [
				"bzz-raw://44f1d0ec7430c1e98bd9ffe92906c1c2f17585abb5d4e07329cc7a05a3fc8c6a",
				"dweb:/ipfs/QmP4LRRjc7azUMakSvE6gDkRKb6b5BWGp6Lug3WsESJcuM"
			]
		},
		"localhost/src/contracts/tokens/erc721-enumerable.sol": {
			"keccak256": "0x4bf5b91ae120df311ad5dfc01361b11d453b2fd60763eb340e918f5203db63cf",
			"license": "MIT",
			"urls": [
				"bzz-raw://fc53a0631c1cd7517fc25851272b42466caff12c0539eec8cdcdf6cf27064d58",
				"dweb:/ipfs/QmRovUaBo6TwvbXquPfwbJDvcbiEnBWCwZXkWtkdhxhtE7"
			]
		},
		"localhost/src/contracts/tokens/erc721-metadata.sol": {
			"keccak256": "0x4dc32b8f780f37c286c9e888376c93d99ba4c62ccc47595d031f6f61e5a3cd0b",
			"license": "MIT",
			"urls": [
				"bzz-raw://a0a66e8e4070bd1c5d0254b56d19f170df3309c2faf357956d1ba6273dda1773",
				"dweb:/ipfs/QmemDeFMgWJvzWo14TQc82tir9cPVNsPJGyZEfULeM6xcF"
			]
		},
		"localhost/src/contracts/tokens/erc721-token-receiver.sol": {
			"keccak256": "0x4cdbea942c336fd8d00127cbe97827242a1feb2c690007dd5d615e73d1edabff",
			"license": "MIT",
			"urls": [
				"bzz-raw://c9a5c1b58e5e7f144030d9e4bf4577e0739eb85b095f2d62a9511a86f9310bc8",
				"dweb:/ipfs/QmcJZaYpTCCCpdgceE8bsUHdExDwKJWRdKhF9rm1U3n3Te"
			]
		},
		"localhost/src/contracts/tokens/erc721.sol": {
			"keccak256": "0x617d36f0b31519a8fa7491572e3031d957ad3abd08757b86e82c7c5da9f6d33b",
			"license": "MIT",
			"urls": [
				"bzz-raw://614b482c8fcdb99ae1cb834eda1330e20a211c665fb7ab486afa0fdd2e8cd516",
				"dweb:/ipfs/Qmc8dvk7XxdhCmf92d9REQ23734gd4QcygDSipi8uDKx6K"
			]
		},
		"localhost/src/contracts/tokens/nf-token-enumerable.sol": {
			"keccak256": "0xa2f7dc4ce73c8e5e30bbe7fc093fac221057c552ea99ab07f522ab6a8aefaad1",
			"license": "MIT",
			"urls": [
				"bzz-raw://bddad7d6b9777c0d102fb8089a991080903cab8844466766b8753cb0f3c1dbeb",
				"dweb:/ipfs/QmehKFwWxBF5sG1fpftyE5JsnskcrNXsZRMHhpKK8UEjo6"
			]
		},
		"localhost/src/contracts/tokens/nf-token-metadata.sol": {
			"keccak256": "0x9f212f628b88f89719d8061d5bc2fa50476607732c529d0b81adac9d28afbd8e",
			"license": "MIT",
			"urls": [
				"bzz-raw://d7c0ab866333378e61553bf71b35715c76f0ef9b87cad2c08a984f2039c05716",
				"dweb:/ipfs/QmPu1LqrfvRRv3PDMkQPBv9vjXNx4QCP2xUiuT6Y2R2JW9"
			]
		},
		"localhost/src/contracts/tokens/nf-token.sol": {
			"keccak256": "0x18115c04a4fae12301fff707293599de9ff3d1ddb20f8a7c1bcffc406edbe337",
			"license": "MIT",
			"urls": [
				"bzz-raw://c8eaef182d583aab6c58496b86c9dcaa4d3328768c3bdb28a6f9d2e9b6a6e1e0",
				"dweb:/ipfs/QmZBrVbegPtE4Rsz7bukRaxqPfkNVSkH6CtPyzRur4wkg1"
			]
		},
		"localhost/src/contracts/utils/address-utils.sol": {
			"keccak256": "0xd5cf8ac87ee4ebebff4e7d6f1b2bf2416016f03151dd47057e40196213cc747b",
			"license": "MIT",
			"urls": [
				"bzz-raw://7e0608cf74cec01d15df48a321b425139fc5bdec9d5a178885b4f00ca33df2c5",
				"dweb:/ipfs/QmSiobwuQdewdEzMvLp2XZp4uG5wtsM4m29j1zHWc4QJuU"
			]
		},
		"localhost/src/contracts/utils/erc165.sol": {
			"keccak256": "0x40d99a38f582ec806109b60b52343e7b6d67541c3c1472045243e077b3e4a155",
			"license": "MIT",
			"urls": [
				"bzz-raw://09623177a20bb24872ff5e825281c845f4826341f5673fbed33b684ec0ff94ae",
				"dweb:/ipfs/QmNcNEFqD4xunn2t3PfqoS6ed1esQqQJ4TW6GS3535qPaF"
			]
		},
		"localhost/src/contracts/utils/supports-interface.sol": {
			"keccak256": "0xd640bfd4f7c1c88b528912ecd2446ff7fc7e8a5df195239080d6cbe53b9d136a",
			"license": "MIT",
			"urls": [
				"bzz-raw://7193870cfeb9d306f8945e92e7c382ecd20495e63863858a3d793e59ac84134f",
				"dweb:/ipfs/QmPMD4KCiKVbfNYXtA3rXWMhD68YcWnWJJFSVszajzoHKZ"
			]
		}
	},
	"version": 1
}